service: localvoice-api

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-export-env
  - serverless-pseudo-parameters
custom:
  allowedHeaders:
    - X-business
    - X-user
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
  execRoleArn: { 'Fn::Join': ['', ['arn:aws:iam::', { 'Ref': 'AWS::AccountId' }, ':role/ecsTaskExecutionRole']] }
  customDomain:
    domainName: api.localvoice.pl
    basePath: ${opt:stage, self:provider.stage}
    certificateName: localvoice.pl
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: test
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    NODE_ENV: ${opt:stage, self:provider.stage}
    LIST_OF_ALL_LESSONS_TABLE: !ImportValue LessonsToLearnTable-${opt:stage, self:provider.stage}
    USERS_TABLE: !ImportValue UsersTable-${opt:stage, self:provider.stage}
    WORDS_TABLE: !ImportValue WordsTable-${opt:stage, self:provider.stage}
    COURSES_IN_BUSINESS_TABLE: !ImportValue CoursesInBusinessTable-${opt:stage, self:provider.stage}
    BUSINESS_TABLE: !ImportValue BusinessTable-${opt:stage, self:provider.stage}
    MONTHLY_CHALLENGE_TABLE: !ImportValue MonthlyChallengeTable-${opt:stage, self:provider.stage}
    INIT_VERSION: 0
    WINNERS_TABLE: !ImportValue WinnersTable-${opt:stage, self:provider.stage}
    COURSES_TABLE: !ImportValue CoursesTable-${opt:stage, self:provider.stage}
    CATEGORIES_TABLE: !ImportValue ListOfCategoriesTable-${opt:stage, self:provider.stage}
    LIST_OF_LESSONS_FOR_SPECIFIC_CATEGORY_TABLE: !ImportValue ListOfLessonsTable-${opt:stage, self:provider.stage}
    STRUCTURE_TABLE: !ImportValue StructureTable-${opt:stage, self:provider.stage}
    LESSONS_FOR_TESTING: !ImportValue SavedLessonsTable-${opt:stage, self:provider.stage}
    SECRET_KEY: ${file(./variables.json):SECRET_KEY}
    DIALOGFLOW_PROJECT_ID: ${file(./variables.json):DIALOGFLOW_PROJECT_ID}
    AWS_S3_BUCKET_PICTURES: ${file(./variables.json):AWS_S3_BUCKET_PICTURES}
    ECS_CLUSTER_NAME: ${file(./variables.json):ECS_CLUSTER_NAME}
    ECS_TASK_DEFINITION: ${file(./variables.json):ECS_TASK_DEFINITION}
    ECS_TASK_VPC_SUBNET_1: ${file(./variables.json):ECS_TASK_VPC_SUBNET_1}
    ECS_TASK_VPC_SUBNET_2: ${file(./variables.json):ECS_TASK_VPC_SUBNET_2}
    CONTAINER_NAME: ${file(./variables.json):CONTAINER_NAME}
    AUTH0_CLIENT_SECRET: ${file(./variables.json):AUTH0_CLIENT_SECRET}
    LOCALVOICE_PHRASE_TABLE: !ImportValue LocalvoiceTables-${opt:stage, self:provider.stage}
    AWS_S3_BUCKET_PICTURES_URL: ${file(./variables.json):AWS_S3_BUCKET_PICTURES_URL}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - '*'
      Resource:
        - '*'
    # - Effect: "Allow"
    #   Action:
    #     - ecs:RunTask
    #   Resource: "*"
    # - Effect: Allow
    #   Action:
    #     - iam:PassRole
    #   Resource: "*"
    # - Effect: Allow
    #   Action:
    #     - s3:*
    #   Resource:
    #     - "arn:aws:s3:::english-project/*"
    #     - "arn:aws:s3:::english-project"
    # - Effect: Allow
    #   Action:
    #     - dynamodb:PutItem
    #     - dynamodb:Query
    #     - dynamodb:GetItem
    #     - dynamodb:UpdateItem
    #     - dynamodb:Scan
    #   Resource:
    #     - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/localvoice-tables-*-SavedLessonsTable-*/*/*"
    #     - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/localvoice-tables-*-LessonsToLearnTable-*/*/*"
    #     - !ImportValue SavedLessonsTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ListOfLessonsTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue UsersTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue WordsTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue LessonsToLearnTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue BusinessTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue StructureTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue CoursesTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ListOfCategoriesTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue CoursesInBusinessTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue MonthlyChallengeTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue WinnersTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForMayTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForJuneTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForJulyTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForAugustTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForSeptemberTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForOctoberTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForNovemberTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForDecemberTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForJanuaryTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForFebruaryTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForMarchTableArn-${opt:stage, self:provider.stage}
    #     - !ImportValue ResultsForAprilTableArn-${opt:stage, self:provider.stage}

functions:
  signUp:
    handler: dist/auth/functions/signup.handler
    description: POST /api/authentication/signup
    events:
      - http:
          path: api/authentication/signup
          method: post
          cors:
            origin: '*'
  signIn:
    handler: dist/auth/functions/signin.handler
    description: POST /api/authentication/signin
    events:
      - http:
          path: api/authentication/signin
          method: post
          cors:
            origin: '*'
  refreshToken:
    handler: dist/auth/functions/refreshToken.handler
    description: POST /api/authentication/refresh
    events:
      - http:
          path: api/authentication/refresh
          method: post
          cors:
            origin: '*'
  imageCredentials:
    handler: dist/legacy/api/little-images/get-s3-credentials.handler
    description: GET /api/s3Credentials
    events:
      - http:
          path: api/s3Credentials
          method: get
          cors:
            origin: '*'
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  deleteImage:
    handler: dist/legacy/api/little-images/delete-image.handler
    description: DELETE /api/images
    events:
      - http:
          path: api/images
          method: delete
          cors:
            origin: '*'
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  getUser:
    handler: dist/user/functions/get.handler
    description: GET /api/user
    events:
      - http:
          path: api/user
          method: get
          cors:
            origin: '*'
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  updateUser:
    handler: dist/user/functions/update.handler
    description: PATCH /api/user
    events:
      - http:
          path: api/user
          method: patch
          cors:
            origin: '*'
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  deleteUser:
    handler: dist/user/functions/remove.handler
    description: DELETE /api/remove
    events:
      - http:
          path: api/user
          method: delete
          cors:
            origin: '*'
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  getVersion:
    handler: dist/version/functions/get.handler
    description: GET /api/version
    events:
      - http:
          path: /api/version
          method: get
          cors:
            origin: '*'
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  getVoicebotLessons:
    handler: dist/legacy/api/lessons/get-lessons.handler
    description: GET /api/voicebot/lessons
    events:
      - http:
          path: /api/voicebot/lessons
          method: get
          cors:
            origin: '*'
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
  getVoicebotStructure:
    handler: dist/legacy/api/structure/get-structure.handler
    description: GET /api/voicebot/structure
    events:
      - http:
          path: /api/voicebot/structure
          method: get
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
  getVoicebotLesson:
    handler: dist/legacy/api/lesson/get-saved-lesson.handler
    description: GET /lesson
    events:
      - http:
          path: /api/voicebot/lesson
          method: get
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
  deleteVoicebotLesson:
    handler: dist/legacy/api/lesson/delete-lesson.handler
    description: DELETE /lesson
    events:
      - http:
          path: /api/voicebot/lesson
          method: delete
          authorizer:
            name: authorization-user-test
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
  getMessenger:
    handler: dist/chatbots/messenger/functions/get.handler
    description: GET /webhook
    events:
      - http:
          path: /webhook
          method: get
          cors:
            origin: '*'
  postMessenger:
    handler: dist/chatbots/messenger/functions/post.handler
    description: POST /webhook
    events:
      - http:
          path: /webhook
          method: post
          cors:
            origin: '*'
  testMessenger:
    handler: dist/chatbots/messenger/functions/test.handler
    description: POST /chatbots/messenger
    events:
      - http:
          path: /chatbots/messenger
          method: post
          cors:
            origin: '*'
  addLessonMessenger:
    handler: dist/chatbots/messenger/functions/addLesson.handler
    description: GET /chatbots/messenger/addLesson
    events:
      - http:
          path: /chatbots/messenger/addLesson
          method: get
          cors:
            origin: '*'
  test-lesson:
    handler: dist/legacy/api/lesson/post-test-lesson.handler
    description: POST /test
    events:
      - http:
          path: test
          method: post
          integration: lambda
          authorizer:
            name: authorization-business-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "email": "$context.authorizer.email",
                "business": "$context.authorizer.business",
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  production-availability:
    handler: dist/legacy/api/lesson/add-production-availability.handler
    description: POST /test
    events:
      - http:
          path: productionAvailability
          method: post
          integration: lambda
          authorizer:
            name: authorization-business-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "email": "$context.authorizer.email",
                "business": "$context.authorizer.business",
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  get-results:
    handler: src/api/winners/getResults.handler
    description: GET /results
    events:
      - http:
          path: results
          method: get
          authorizer:
            name: authorization-user-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          integration: lambda
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "email": "$context.authorizer.email",
                "picture": "$context.authorizer.picture",
                "business": "$context.authorizer.business",
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  put-winners:
    handler: src/api/winners/putWinners.handler
    description: PUT /winner list
    events:
      - schedule:
          rate: cron(59 18 * * ? *)
          enabled: true
          input:
            env: test
      - http:
          path: results
          method: put
          integration: lambda
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  generate-pictures:
    handler: dist/legacy/api/pictures/generate-pictures.handler
    description: POST /generatePictures
    events:
      - http:
          path: generatePictures
          method: post
          integration: lambda
          authorizer:
            name: authorization-business-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "email": "$context.authorizer.email",
                "business": "$context.authorizer.business",
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  get-words:
    handler: src/api/words/get-words.handler
    description: GET /words
    events:
      - http:
          path: words
          method: get
          integration: lambda
          cors:
            origin: '*'
          request:
            template:
              application/json: >

  save-synonyms:
    handler: src/api/dialogflow/post-synonyms.handler
    description: POST /synonyms
    events:
      - http:
          path: synonyms
          method: post
          integration: lambda
          cors:
            origin: '*'
          request:
            template:
              application/json: >

  get-saved-lessons:
    handler: dist/legacy/api/lessons/get-lessons.handler
    description: GET /lessons
    events:
      - http:
          path: lessons
          method: get
          authorizer:
            name: authorization-business-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          integration: lambda
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "email": "$context.authorizer.email",
                "business": "$context.authorizer.business",
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  save-lesson-for-further-processing:
    handler: dist/legacy/api/lesson/post-saved-lesson.handler
    description: POST /save
    events:
      - http:
          path: save
          method: post
          integration: lambda
          authorizer:
            name: authorization-business-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "email": "$context.authorizer.email",
                "business": "$context.authorizer.business",
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  update-image-versioning:
    handler: dist/legacy/api/little-images/post-image-versioning.handler
    description: POST /image
    events:
      - http:
          path: image
          method: post
          integration: lambda
          authorizer:
            name: authorization-business-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "email": "$context.authorizer.email",
                "business": "$context.authorizer.business",
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  get-image-versioning:
    handler: dist/legacy/api/little-images/get-image-versioning.handler
    description: GET /image
    events:
      - http:
          path: image
          method: get
          integration: lambda
          authorizer:
            name: authorization-business-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "email": "$context.authorizer.email",
                "business": "$context.authorizer.business",
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  save-structure:
    handler: dist/legacy/api/structure/post-save-structure.handler
    description: POST /save/structure
    events:
      - http:
          path: save/structure
          method: post
          integration: lambda
          authorizer:
            name: authorization-business-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "email": "$context.authorizer.email",
                "business": "$context.authorizer.business",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  save-dev-structure:
    handler: dist/legacy/api/structure/post-dev-structure.handler
    description: POST /dev/structure
    events:
      - http:
          path: dev/structure
          method: post
          integration: lambda
          authorizer:
            name: authorization-business-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
          cors:
            origin: '*'
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "email": "$context.authorizer.email",
                "business": "$context.authorizer.business",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

  # registration-for-testers:
  #   handler: src/api/registration/post-registration.handler
  #   description: POST /registration
  #   events:
  #     - http:
  #         path: registration
  #         method: post
  #         authorizer:
  #           name: authorization-business-lambda
  #           identitySource: method.request.header.Authorization
  #           resultTtlInSeconds: 0
  #         integration: lambda
  #         cors: true
  #         request:
  #           template:
  #             application/json: >

  authorization-business-lambda:
    handler: dist/legacy/api/auth/businessAuth.handler

  authorization-user-lambda:
    handler: dist/legacy/api/auth/userAuth.handler

  authorization-user-test:
    handler: dist/legacy/api/auth/test.handler
# resources:

#   Resources:

#     GatewayResponseDefault4XX:

#       Type: 'AWS::ApiGateway::GatewayResponse'

#       Properties:

#         ResponseParameters:

#           gatewayresponse.header.Access-Control-Allow-Origin: ${file(./variables.${opt:stage, self:provider.stage}.json):CORS}

#           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"

#         ResponseType: DEFAULT_4XX

#         RestApiId:

#           Ref: 'ApiGatewayRestApi'
