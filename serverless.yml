service: ga-web-english-project

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-export-env
custom:
  allowedHeaders:
    - X-business
    - X-user
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
  customDomain:
    domainName: api.localvoice.pl
    basePath: 'v2'
    stage: ${opt:stage, self:provider.stage}
    certificateName: localvoice.pl
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  stage: test
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    NODE_ENV: ${opt:stage, self:provider.stage}
    LIST_OF_ALL_LESSONS_TABLE: !ImportValue LessonsToLearnTable-${opt:stage, self:provider.stage}
    USERS_TABLE: !ImportValue UsersTable-${opt:stage, self:provider.stage}
    WORDS_TABLE: !ImportValue WordsTable-${opt:stage, self:provider.stage}
    COURSES_IN_BUSINESS_TABLE: !ImportValue CoursesInBusinessTable-${opt:stage, self:provider.stage}
    BUSINESS_TABLE: !ImportValue BusinessTable-${opt:stage, self:provider.stage}
    LESSONS_TABLE: ga-web-english-project--lessons_for_testing-prod
    MONTHLY_CHALLENGE_TABLE: !ImportValue MonthlyChallengeTable-${opt:stage, self:provider.stage}
    INIT_VERSION: 0
    COURSES_TABLE: !ImportValue CoursesTable-${opt:stage, self:provider.stage}
    CATEGORIES_TABLE: !ImportValue ListOfCategoriesTable-${opt:stage, self:provider.stage}
    LIST_OF_LESSONS_FOR_SPECIFIC_CATEGORY_TABLE: !ImportValue ListOfLessonsTable-${opt:stage, self:provider.stage}
    STRUCTURE_TABLE: !ImportValue StructureTable-${opt:stage, self:provider.stage}
    SECRET_KEY: ${file(./variables.json):SECRET_KEY}
    LESSONS_FOR_TESTING: ${file(./variables.json):LESSONS_FOR_TESTING}
    DIALOGFLOW_PROJECT_ID: ${file(./variables.json):DIALOGFLOW_PROJECT_ID}
    AWS_S3_BUCKET_PICTURES: ${file(./variables.json):AWS_S3_BUCKET_PICTURES}
    ECS_CLUSTER_NAME: ${file(./variables.json):ECS_CLUSTER_NAME}
    ECS_TASK_DEFINITION: ${file(./variables.json):ECS_TASK_DEFINITION}
    ECS_TASK_VPC_SUBNET_1: ${file(./variables.json):ECS_TASK_VPC_SUBNET_1}
    ECS_TASK_VPC_SUBNET_2: ${file(./variables.json):ECS_TASK_VPC_SUBNET_2}
    CONTAINER_NAME: ${file(./variables.json):CONTAINER_NAME}


  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LESSONS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LESSONS_TABLE}/*/*"
        - !ImportValue ListOfLessonsTableArn-${opt:stage, self:provider.stage}
        - !ImportValue UsersTableArn-${opt:stage, self:provider.stage}
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LESSONS_FOR_TESTING}"
        # - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SYNONYMS_TABLE}"
        - !ImportValue WordsTableArn-${opt:stage, self:provider.stage}
        - !ImportValue LessonsToLearnTableArn-${opt:stage, self:provider.stage}
        - !ImportValue BusinessTableArn-${opt:stage, self:provider.stage}
        - !ImportValue StructureTableArn-${opt:stage, self:provider.stage}
        - !ImportValue CoursesTableArn-${opt:stage, self:provider.stage}
        - !ImportValue ListOfCategoriesTableArn-${opt:stage, self:provider.stage}
        - !ImportValue CoursesInBusinessTableArn-${opt:stage, self:provider.stage}
        - !ImportValue MonthlyChallengeTableArn-${opt:stage, self:provider.stage}
functions:
  test-lesson:
    handler: dist/api/lesson/post-test-lesson.handler
    description: POST /test
    events:
      - http:
          path: test
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  generate-pictures:
    handler: dist/api/pictures/generate-pictures.handler
    description: POST /generatePictures
    events:
      - http:
          path: generatePictures
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  image-credentials:
    handler: dist/api/little-images/get-image-credentials.handler
    description: GET /imageCredentials
    events:
      - http:
          path: imageCredentials
          method: get
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  delete-image:
    handler: dist/api/little-images/delete-image.handler
    description: DELETE /image
    events:
      - http:
          path: image
          method: delete
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
                
  get-words:
    handler: src/api/words/get-words.handler
    description: GET /words
    events:
      - http:
          path: words
          method: get
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >

  save-synonyms:
    handler: src/api/dialogflow/post-synonyms.handler
    description: POST /synonyms
    events:
      - http:
          path: synonyms
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >

  get-saved-lesson:
    handler: dist/api/lesson/get-saved-lesson.handler
    description: GET /lesson
    events:
      - http:
          path: lesson
          method: get
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  delete-saved-lesson:
    handler: dist/api/lesson/delete-lesson.handler
    description: DELETE /lesson
    events:
      - http:
          path: lesson
          method: delete
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  get-saved-lessons:
    handler: dist/api/lessons/get-lessons.handler
    description: GET /lessons/{name}
    events:
      - http:
          path: lessons/{name}
          method: get
          integration: lambda
          authorizer:
            name: authorization-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                #set($inputRoot = $input.path('$'))
                {
                "tester": "$input.params('name')"
                }
  save-lesson-for-further-processing:
    handler: dist/api/lesson/post-saved-lesson.handler
    description: POST /save
    events:
      - http:
          path: save
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  update-image-versioning:
    handler: dist/api/little-images/post-image-versioning.handler
    description: POST /image
    events:
      - http:
          path: image
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  get-image-versioning:
    handler: dist/api/little-images/get-image-versioning.handler
    description: GET /image
    events:
      - http:
          path: image
          method: get
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  get-structure:
    handler: dist/api/structure/get-structure.handler
    description: GET /structure
    events:
      - http:
          path: structure
          method: get
          authorizer:
            name: authorization-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
              # Access-Control-Allow-Credentials: true

  save-structure:
    handler: dist/api/structure/post-save-structure.handler
    description: POST /save/structure
    events:
      - http:
          path: save/structure
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  save-dev-structure:
    handler: dist/api/structure/post-dev-structure.handler
    description: POST /dev/structure
    events:
      - http:
          path: dev/structure
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            schema:
              application/json: ${file(./create_request.json)}
              text/html: { foo: 'bar' }
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  registration-for-testers:
    handler: src/api/registration/post-registration.handler
    description: POST /registration
    events:
      - http:
          path: registration
          method: post
          authorizer:
            name: authorization-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
          integration: lambda
          cors: true
          request:
            template:
              application/json: >


  authorization-lambda:
    handler: src/api/auth/auth.handler
    integration: lambda
    cors:
      origin: '*'
      headers: ${self:custom.allowedHeaders}
    # response:
    #   headers:
    #     Access-Control-Allow-Origin: "'*'"

  action-to-read-function:
    handler: api/extraFeatures/action-to-readFunction.handler
    description: GET /read
    events:
      - http:
          path: read
          method: post
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }

  get-business:
    handler: dist/api/business/get-name-of-business.handler
    description: GET /business
    events:
      - http:
          path: business
          method: get
          integration: lambda
          authorizer:
            name: authorization-lambda
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >
                {
                "method": "$context.httpMethod",
                "body" : $input.json('$'),
                "headers": {
                  #foreach($param in $input.params().header.keySet())
                  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "queryParams": {
                  #foreach($param in $input.params().querystring.keySet())
                  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end
                  #end
                },
                "pathParams": {
                  #foreach($param in $input.params().path.keySet())
                  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                  #end
                }
                }
  put-text-to-readFunction:
    handler: api/extraFeatures/put-text-to-readFunction.handler
    description: PUT /text
    events:
      - http:
          path: text
          method: put
          integration: lambda
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          request:
            template:
              application/json: >


# resources:
#   Resources:
#     GatewayResponseDefault4XX:
#       Type: 'AWS::ApiGateway::GatewayResponse'
#       Properties:
#         ResponseParameters:
#           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#         ResponseType: DEFAULT_4XX
#         RestApiId:
#           Ref: 'ApiGatewayRestApi'
